{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "2: Examine the Environment and Launch the SPA App",
  "steps": [
    {
      "file": "",
      "line": 1,
      "title": "What you'll do",
      "description": "## What you'll do:\nIn this lab, you will learn how to add sign-on capabilities to a Single-Page Application (SPA). You will integrate the SPA with Auth0 so that your users are able to use the Auth0 Universal Login Page to authenticate.\n\nThe SPA in question is a vanilla JavaScript application that consumes the Expenses API endpoint.\n\nIn this exercise, you will focus on integrating the SPA with Auth0 and getting the profile of the logged-in user. "
    },
    {
      "file": "",
      "line": 1,
      "title": "Examine the Client ID and Client Secret in the Auth0 Extension",
      "description": "## Examine the Client ID and Client Secret in the Auth0 Extension\nWith the SPA registered in the Auth0 Dashboard, it has been issued a ClientID and Client Secret. These values must be configured in our application code. \n\nYou can view them from within the Auth0 Extension.\n\n1. #### Click [here](command:appsView.focus) to view the SPA App details from the Auth0 Extension.\n    You should see the \"**_Lab: SPA_**\" that you just registered in the Auth0 dashboard listed under the **APPLICATIONS** menu. \n1. #### Expand the \"_Lab: SPA_\" application, and you should see the _Client ID_ and _Client Secret_.\n    Slightly lower, under the _APIS_ menu, you should also see a **_\"Lab: API\"_**. \n    This is the Auth0 configuration for the API that our SPA will consume.\n1. #### Return to the file explorer (click [here](command:workbench.files.action.focusOpenEditorsView)).\n\nContinue to take a look at where the Client ID has been stored in the local environment."
    },
    {
      "file": "src/spa-app/.env",
      "description": "## Locate the Client ID in the SPA App's .env file\nHere, in the **_spa-app > .env_** file, you can see the **Client ID** listed as **CLIENT_ID**. This value is now accessible to the environment. \n\nWIth everything configured, you should now be able to launch the SPA and take a look. ",
      "line": 3,
      "selection": {
        "start": {
          "line": 3,
          "character": 1
        },
        "end": {
          "line": 3,
          "character": 43
        }
      }
    },
    {
      "file": "",
      "line": 1,
      "title": "Launch the SPA!",
      "description": "## Launch the SPA!\nLet's launch the SPA App in it's current state and see what's there.\n\n1. #### Launch the SPA App:\n   1. #### Click [here](command:workbench.action.files.saveAll) to save all of this progress.  \n   1. #### Click [here](command:workbench.action.terminal.new) to open your VSCode terminal.  \n       (You may already have one open, that's ok)\n   1. #### Click [here](command:workbench.action.debug.start) to build and deploy the SPA and API.\n   1. #### Ensure the ports are public so that the SPA app and API can communicate. Click the ports tab below, then right click each endpoint, and change the port visibility to public. You may see additional ports listed, which you can safely ignore.\n    *Note: You will need to repeat these steps if you restart your Codespace.*\n    \n     ![](https://cdn.auth0.com/website/auth0/labs/ilt/public-ports.gif)\n   1. #### Click [here](command:auth0.lab.openEndpointByName?[\"Lab: SPA\"]) to launch and view the SPA in your web browser. \n       *Note: This deployment may take longer to complete than those of other labs.*\n \n2.  #### Take a look at the SPA in your browser.\n    \n     ![](https://cdn.auth0.com/website/training/example/IDFUN-M04-L01-Ex01/img-1.png)  \n  \n     This is the homepage of your SPA. Right now, the app is only consuming the public endpoint provided by the API. \n     \n     This endpoint returns two pieces of information: the total number of expenses recorded in the database (two, in this case) and the sum of their amount ($144.00). \n     \n     The SPA is using this information to feed the summary section of the page you are seeing, and for now, it's reporting this information publically. Yikes!\n\n     You'll also notice that the login button doesn't do anything - that's because we haven't implemented sign in! Let's do that now to solve both of these issues.\n\nLet's implement Web Sign-In and get to work fixing this problem.",
      "selection": {
        "start": {
          "line": 10,
          "character": 2
        },
        "end": {
          "line": 11,
          "character": 5
        }
      }
    }
  ],
  "nextTour": "3: Implement Web Sign-In"
}